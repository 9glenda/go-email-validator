// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ev/validator.go

// Package mockev is a generated GoMock package.
package mockev

import (
	ev "github.com/go-email-validator/go-email-validator/pkg/ev"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// GetDeps mocks base method
func (m *MockValidator) GetDeps() []ev.ValidatorName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeps")
	ret0, _ := ret[0].([]ev.ValidatorName)
	return ret0
}

// GetDeps indicates an expected call of GetDeps
func (mr *MockValidatorMockRecorder) GetDeps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeps", reflect.TypeOf((*MockValidator)(nil).GetDeps))
}

// Validate mocks base method
func (m *MockValidator) Validate(input ev.Input, results ...ev.ValidationResult) ev.ValidationResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{input}
	for _, a := range results {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(ev.ValidationResult)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockValidatorMockRecorder) Validate(input interface{}, results ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{input}, results...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), varargs...)
}

// MockChangeableValidationResult is a mock of ChangeableValidationResult interface
type MockChangeableValidationResult struct {
	ctrl     *gomock.Controller
	recorder *MockChangeableValidationResultMockRecorder
}

// MockChangeableValidationResultMockRecorder is the mock recorder for MockChangeableValidationResult
type MockChangeableValidationResultMockRecorder struct {
	mock *MockChangeableValidationResult
}

// NewMockChangeableValidationResult creates a new mock instance
func NewMockChangeableValidationResult(ctrl *gomock.Controller) *MockChangeableValidationResult {
	mock := &MockChangeableValidationResult{ctrl: ctrl}
	mock.recorder = &MockChangeableValidationResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChangeableValidationResult) EXPECT() *MockChangeableValidationResultMockRecorder {
	return m.recorder
}

// SetErrors mocks base method
func (m *MockChangeableValidationResult) SetErrors(arg0 []error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErrors", arg0)
}

// SetErrors indicates an expected call of SetErrors
func (mr *MockChangeableValidationResultMockRecorder) SetErrors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrors", reflect.TypeOf((*MockChangeableValidationResult)(nil).SetErrors), arg0)
}

// SetWarnings mocks base method
func (m *MockChangeableValidationResult) SetWarnings(arg0 []error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWarnings", arg0)
}

// SetWarnings indicates an expected call of SetWarnings
func (mr *MockChangeableValidationResultMockRecorder) SetWarnings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWarnings", reflect.TypeOf((*MockChangeableValidationResult)(nil).SetWarnings), arg0)
}

// MockValidationResult is a mock of ValidationResult interface
type MockValidationResult struct {
	ctrl     *gomock.Controller
	recorder *MockValidationResultMockRecorder
}

// MockValidationResultMockRecorder is the mock recorder for MockValidationResult
type MockValidationResultMockRecorder struct {
	mock *MockValidationResult
}

// NewMockValidationResult creates a new mock instance
func NewMockValidationResult(ctrl *gomock.Controller) *MockValidationResult {
	mock := &MockValidationResult{ctrl: ctrl}
	mock.recorder = &MockValidationResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidationResult) EXPECT() *MockValidationResultMockRecorder {
	return m.recorder
}

// IsValid mocks base method
func (m *MockValidationResult) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid
func (mr *MockValidationResultMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockValidationResult)(nil).IsValid))
}

// Errors mocks base method
func (m *MockValidationResult) Errors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockValidationResultMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockValidationResult)(nil).Errors))
}

// HasErrors mocks base method
func (m *MockValidationResult) HasErrors() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasErrors")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasErrors indicates an expected call of HasErrors
func (mr *MockValidationResultMockRecorder) HasErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasErrors", reflect.TypeOf((*MockValidationResult)(nil).HasErrors))
}

// Warnings mocks base method
func (m *MockValidationResult) Warnings() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warnings")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Warnings indicates an expected call of Warnings
func (mr *MockValidationResultMockRecorder) Warnings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnings", reflect.TypeOf((*MockValidationResult)(nil).Warnings))
}

// HasWarnings mocks base method
func (m *MockValidationResult) HasWarnings() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasWarnings")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasWarnings indicates an expected call of HasWarnings
func (mr *MockValidationResultMockRecorder) HasWarnings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasWarnings", reflect.TypeOf((*MockValidationResult)(nil).HasWarnings))
}

// ValidatorName mocks base method
func (m *MockValidationResult) ValidatorName() ev.ValidatorName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorName")
	ret0, _ := ret[0].(ev.ValidatorName)
	return ret0
}

// ValidatorName indicates an expected call of ValidatorName
func (mr *MockValidationResultMockRecorder) ValidatorName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorName", reflect.TypeOf((*MockValidationResult)(nil).ValidatorName))
}
