// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ev/evsmtp/smtpclient/interface.go

// Package mocksmtpclient is a generated GoMock package.
package mocksmtpclient

import (
	tls "crypto/tls"
	gomock "github.com/golang/mock/gomock"
	io "io"
	smtp "net/smtp"
	reflect "reflect"
)

// MockSMTPClient is a mock of SMTPClient interface
type MockSMTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientMockRecorder
}

// MockSMTPClientMockRecorder is the mock recorder for MockSMTPClient
type MockSMTPClientMockRecorder struct {
	mock *MockSMTPClient
}

// NewMockSMTPClient creates a new mock instance
func NewMockSMTPClient(ctrl *gomock.Controller) *MockSMTPClient {
	mock := &MockSMTPClient{ctrl: ctrl}
	mock.recorder = &MockSMTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSMTPClient) EXPECT() *MockSMTPClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSMTPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSMTPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSMTPClient)(nil).Close))
}

// Hello mocks base method
func (m *MockSMTPClient) Hello(localName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", localName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hello indicates an expected call of Hello
func (mr *MockSMTPClientMockRecorder) Hello(localName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockSMTPClient)(nil).Hello), localName)
}

// StartTLS mocks base method
func (m *MockSMTPClient) StartTLS(config *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTLS", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTLS indicates an expected call of StartTLS
func (mr *MockSMTPClientMockRecorder) StartTLS(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTLS", reflect.TypeOf((*MockSMTPClient)(nil).StartTLS), config)
}

// TLSConnectionState mocks base method
func (m *MockSMTPClient) TLSConnectionState() (tls.ConnectionState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSConnectionState")
	ret0, _ := ret[0].(tls.ConnectionState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TLSConnectionState indicates an expected call of TLSConnectionState
func (mr *MockSMTPClientMockRecorder) TLSConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSConnectionState", reflect.TypeOf((*MockSMTPClient)(nil).TLSConnectionState))
}

// Verify mocks base method
func (m *MockSMTPClient) Verify(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockSMTPClientMockRecorder) Verify(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSMTPClient)(nil).Verify), addr)
}

// Auth mocks base method
func (m *MockSMTPClient) Auth(a smtp.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth
func (mr *MockSMTPClientMockRecorder) Auth(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockSMTPClient)(nil).Auth), a)
}

// Mail mocks base method
func (m *MockSMTPClient) Mail(from string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mail", from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mail indicates an expected call of Mail
func (mr *MockSMTPClientMockRecorder) Mail(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mail", reflect.TypeOf((*MockSMTPClient)(nil).Mail), from)
}

// Rcpt mocks base method
func (m *MockSMTPClient) Rcpt(to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rcpt", to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rcpt indicates an expected call of Rcpt
func (mr *MockSMTPClientMockRecorder) Rcpt(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcpt", reflect.TypeOf((*MockSMTPClient)(nil).Rcpt), to)
}

// Data mocks base method
func (m *MockSMTPClient) Data() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data
func (mr *MockSMTPClientMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSMTPClient)(nil).Data))
}

// Extension mocks base method
func (m *MockSMTPClient) Extension(ext string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extension", ext)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Extension indicates an expected call of Extension
func (mr *MockSMTPClientMockRecorder) Extension(ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extension", reflect.TypeOf((*MockSMTPClient)(nil).Extension), ext)
}

// Reset mocks base method
func (m *MockSMTPClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockSMTPClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSMTPClient)(nil).Reset))
}

// Noop mocks base method
func (m *MockSMTPClient) Noop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Noop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Noop indicates an expected call of Noop
func (mr *MockSMTPClientMockRecorder) Noop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Noop", reflect.TypeOf((*MockSMTPClient)(nil).Noop))
}

// Quit mocks base method
func (m *MockSMTPClient) Quit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit
func (mr *MockSMTPClientMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockSMTPClient)(nil).Quit))
}
