// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ev/evsmtp/smtp.go

// Package evsmtp is a generated GoMock package.
package evsmtp

import (
	evmail "github.com/go-email-validator/go-email-validator/pkg/ev/evmail"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChecker is a mock of Checker interface
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockChecker) Validate(mxs MXs, email evmail.Address) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", mxs, email)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockCheckerMockRecorder) Validate(mxs, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockChecker)(nil).Validate), mxs, email)
}

// MockCheckerWithRandomRCPT is a mock of CheckerWithRandomRCPT interface
type MockCheckerWithRandomRCPT struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerWithRandomRCPTMockRecorder
}

// MockCheckerWithRandomRCPTMockRecorder is the mock recorder for MockCheckerWithRandomRCPT
type MockCheckerWithRandomRCPTMockRecorder struct {
	mock *MockCheckerWithRandomRCPT
}

// NewMockCheckerWithRandomRCPT creates a new mock instance
func NewMockCheckerWithRandomRCPT(ctrl *gomock.Controller) *MockCheckerWithRandomRCPT {
	mock := &MockCheckerWithRandomRCPT{ctrl: ctrl}
	mock.recorder = &MockCheckerWithRandomRCPTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckerWithRandomRCPT) EXPECT() *MockCheckerWithRandomRCPTMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockCheckerWithRandomRCPT) Validate(mxs MXs, email evmail.Address) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", mxs, email)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockCheckerWithRandomRCPTMockRecorder) Validate(mxs, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCheckerWithRandomRCPT)(nil).Validate), mxs, email)
}

// RandomRCPT mocks base method
func (m *MockCheckerWithRandomRCPT) RandomRCPT(email evmail.Address) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomRCPT", email)
	ret0, _ := ret[0].([]error)
	return ret0
}

// RandomRCPT indicates an expected call of RandomRCPT
func (mr *MockCheckerWithRandomRCPTMockRecorder) RandomRCPT(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomRCPT", reflect.TypeOf((*MockCheckerWithRandomRCPT)(nil).RandomRCPT), email)
}
